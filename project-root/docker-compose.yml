version: '3.8'

services:
  # API Gateway
  kong:
    image: kong:3.5
    environment:
      KONG_DATABASE: "${KONG_DATABASE}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:${KONG_ADMIN_PORT}"
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
    ports:
      - "${KONG_PROXY_PORT}:8000"
      - "${KONG_ADMIN_PORT}:8001"
    volumes:
      - ./kong/kong.yml:/opt/kong/kong.yml
    networks:
      - ecom-network

  # Auth Service
  auth-service:
    build: ./auth-service
    ports:
      - "8081:8081"
    environment:
      - JWT_SECRET=your-secret-key
    networks:
      - ecom-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service
  product-service:
      build: ./product-service
      environment:
        - MONGODB_URI=${MONGODB_URI}
      ports:
        - "${PRODUCT_SERVICE_PORT}:8082"
      depends_on:
        mongodb:
          condition: service_healthy
      networks:
        - ${NETWORK_NAME}
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
        interval: 30s
        timeout: 10s
        retries: 3

  # Order Service
  order-service:
      build: ./order-service
      environment:
        - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
        - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
        - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
        - SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO}
        - SPRING_JPA_SHOW_SQL=${SPRING_JPA_SHOW_SQL}
        - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      ports:
        - "${ORDER_SERVICE_PORT}:8083"
      depends_on:
        postgres:
          condition: service_healthy
        kafka:
          condition: service_started
      networks:
        - ${NETWORK_NAME}

  # MongoDB
  mongodb:
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - ecom-network

  # PostgreSQL
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ecom-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecom-network
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - ${NETWORK_NAME}

volumes:
  mongodb_data:
  postgres_data:

networks:
  ecom-network:
    driver: bridge